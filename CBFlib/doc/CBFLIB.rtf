{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f4\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times;}
{\f5\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Helvetica;}{\f6\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Courier;}{\f7\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Geneva;}
{\f8\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Tms Rmn;}{\f9\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Helv;}{\f10\froman\fcharset0\fprq2{\*\panose 00000000000000000000}MS Serif;}
{\f11\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}{\f12\froman\fcharset0\fprq2{\*\panose 00000000000000000000}New York;}{\f13\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}System;}
{\f14\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}Wingdings;}{\f15\fswiss\fcharset0\fprq3{\*\panose 020b0604030504040204}Tahoma;}{\f16\froman\fcharset238\fprq2 Times New Roman CE;}{\f17\froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f19\froman\fcharset161\fprq2 Times New Roman Greek;}{\f20\froman\fcharset162\fprq2 Times New Roman Tur;}{\f21\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f22\fswiss\fcharset238\fprq2 Arial CE;}{\f23\fswiss\fcharset204\fprq2 Arial Cyr;}
{\f25\fswiss\fcharset161\fprq2 Arial Greek;}{\f26\fswiss\fcharset162\fprq2 Arial Tur;}{\f27\fswiss\fcharset186\fprq2 Arial Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;
\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}
{\stylesheet{\nowidctlpar\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}{\s1\keepn\nowidctlpar\widctlpar\adjustright \sbasedon0 \snext0 heading 1;}{\s2\qc\keepn\nowidctlpar\widctlpar\adjustright \cgrid \sbasedon0 \snext0 heading 2;}{
\s3\fi-2520\li2880\keepn\nowidctlpar\widctlpar\adjustright \cgrid \sbasedon0 \snext0 heading 3;}{\*\cs10 \additive Default Paragraph Font;}{\s15\qc\nowidctlpar\widctlpar\adjustright \sbasedon0 \snext15 Title;}{\s16\sl360\slmult0
\nowidctlpar\widctlpar\adjustright \fs28\lang3081\cgrid \sbasedon0 \snext16 Paper;}{\s17\nowidctlpar\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext17 footer;}{\*\cs18 \additive \sbasedon10 page number;}{
\s19\nowidctlpar\widctlpar\adjustright \fs20\cgrid \sbasedon0 \snext0 \sautoupd toc 1;}{\s20\li202\sa120\nowidctlpar\widctlpar\tx720\tqr\tldot\tx8630\adjustright \fs22\lang1024\cgrid \sbasedon0 \snext0 \sautoupd toc 2;}{
\s21\li400\nowidctlpar\widctlpar\adjustright \fs20\cgrid \sbasedon0 \snext0 \sautoupd toc 3;}{\s22\li600\nowidctlpar\widctlpar\adjustright \fs20\cgrid \sbasedon0 \snext0 \sautoupd toc 4;}{\s23\li800\nowidctlpar\widctlpar\adjustright \fs20\cgrid 
\sbasedon0 \snext0 \sautoupd toc 5;}{\s24\li1000\nowidctlpar\widctlpar\adjustright \fs20\cgrid \sbasedon0 \snext0 \sautoupd toc 6;}{\s25\li1200\nowidctlpar\widctlpar\adjustright \fs20\cgrid \sbasedon0 \snext0 \sautoupd toc 7;}{
\s26\li1400\nowidctlpar\widctlpar\adjustright \fs20\cgrid \sbasedon0 \snext0 \sautoupd toc 8;}{\s27\li1600\nowidctlpar\widctlpar\adjustright \fs20\cgrid \sbasedon0 \snext0 \sautoupd toc 9;}{\s28\nowidctlpar\widctlpar\adjustright \fs22\cgrid 
\sbasedon0 \snext28 Body Text;}}{\*\listtable{\list\listtemplateid-823337902\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat2\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }
{\listname ;}\listid81878428}{\list\listtemplateid-1546359894{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat2\levelspace0\levelindent0{\leveltext\'01\'00;}{\levelnumbers\'01;}\fbias0 \fi-600\li600\jclisttab\tx600 }{\listlevel\levelnfc0\leveljc0
\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'03\'00.\'01;}{\levelnumbers\'01\'03;}\fbias0 \fi-600\li600\jclisttab\tx600 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat3\levelspace0\levelindent0{\leveltext
\'05\'00.\'01.\'02;}{\levelnumbers\'01\'03\'05;}\fbias0 \fi-720\li720\jclisttab\tx720 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'07\'00.\'01.\'02.\'03;}{\levelnumbers\'01\'03\'05\'07;}\fbias0 
\fi-720\li720\jclisttab\tx720 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'09\'00.\'01.\'02.\'03.\'04;}{\levelnumbers\'01\'03\'05\'07\'09;}\fbias0 \fi-1080\li1080\jclisttab\tx1080 }{\listlevel\levelnfc0
\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'0b\'00.\'01.\'02.\'03.\'04.\'05;}{\levelnumbers\'01\'03\'05\'07\'09\'0b;}\fbias0 \fi-1080\li1080\jclisttab\tx1080 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1
\levelspace0\levelindent0{\leveltext\'0d\'00.\'01.\'02.\'03.\'04.\'05.\'06;}{\levelnumbers\'01\'03\'05\'07\'09\'0b\'0d;}\fbias0 \fi-1440\li1440\jclisttab\tx1440 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext
\'0f\'00.\'01.\'02.\'03.\'04.\'05.\'06.\'07;}{\levelnumbers\'01\'03\'05\'07\'09\'0b\'0d\'0f;}\fbias0 \fi-1440\li1440\jclisttab\tx1440 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext
\'11\'00.\'01.\'02.\'03.\'04.\'05.\'06.\'07.\'08;}{\levelnumbers\'01\'03\'05\'07\'09\'0b\'0d\'0f\'11;}\fbias0 \fi-1800\li1800\jclisttab\tx1800 }{\listname ;}\listid244648985}{\list\listtemplateid1532244062{\listlevel\levelnfc0\leveljc0\levelfollow0
\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levellegal\levelspace0\levelindent0{\leveltext\'03\'00.\'01;}{\levelnumbers
\'01\'03;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levellegal\levelspace0\levelindent0{\leveltext\'05\'00.\'01.\'02;}{\levelnumbers\'01\'03\'05;}\fbias0 \fi-720\li720\jclisttab\tx720 }{\listlevel
\levelnfc0\leveljc0\levelfollow0\levelstartat1\levellegal\levelspace0\levelindent0{\leveltext\'07\'00.\'01.\'02.\'03;}{\levelnumbers\'01\'03\'05\'07;}\fbias0 \fi-720\li720\jclisttab\tx720 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1
\levellegal\levelspace0\levelindent0{\leveltext\'09\'00.\'01.\'02.\'03.\'04;}{\levelnumbers\'01\'03\'05\'07\'09;}\fbias0 \fi-1080\li1080\jclisttab\tx1080 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levellegal\levelspace0\levelindent0
{\leveltext\'0b\'00.\'01.\'02.\'03.\'04.\'05;}{\levelnumbers\'01\'03\'05\'07\'09\'0b;}\fbias0 \fi-1080\li1080\jclisttab\tx1080 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levellegal\levelspace0\levelindent0{\leveltext
\'0d\'00.\'01.\'02.\'03.\'04.\'05.\'06;}{\levelnumbers\'01\'03\'05\'07\'09\'0b\'0d;}\fbias0 \fi-1440\li1440\jclisttab\tx1440 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levellegal\levelspace0\levelindent0{\leveltext
\'0f\'00.\'01.\'02.\'03.\'04.\'05.\'06.\'07;}{\levelnumbers\'01\'03\'05\'07\'09\'0b\'0d\'0f;}\fbias0 \fi-1440\li1440\jclisttab\tx1440 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levellegal\levelspace0\levelindent0{\leveltext
\'11\'00.\'01.\'02.\'03.\'04.\'05.\'06.\'07.\'08;}{\levelnumbers\'01\'03\'05\'07\'09\'0b\'0d\'0f\'11;}\fbias0 \fi-1800\li1800\jclisttab\tx1800 }{\listname ;}\listid685257491}{\list\listtemplateid-1781390782{\listlevel\levelnfc0\leveljc0\levelfollow0
\levelstartat2\levelspace0\levelindent0{\leveltext\'01\'00;}{\levelnumbers\'01;}\fbias0 \fi-600\li600\jclisttab\tx600 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat2\levelspace0\levelindent0{\leveltext\'03\'00.\'01;}{\levelnumbers\'01\'03;}
\fbias0 \fi-600\li600\jclisttab\tx600 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat3\levelspace0\levelindent0{\leveltext\'05\'00.\'01.\'02;}{\levelnumbers\'01\'03\'05;}\fbias0 \fi-720\li720\jclisttab\tx720 }{\listlevel\levelnfc0\leveljc0
\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'07\'00.\'01.\'02.\'03;}{\levelnumbers\'01\'03\'05\'07;}\fbias0 \fi-720\li720\jclisttab\tx720 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext
\'09\'00.\'01.\'02.\'03.\'04;}{\levelnumbers\'01\'03\'05\'07\'09;}\fbias0 \fi-1080\li1080\jclisttab\tx1080 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'0b\'00.\'01.\'02.\'03.\'04.\'05;}{\levelnumbers
\'01\'03\'05\'07\'09\'0b;}\fbias0 \fi-1080\li1080\jclisttab\tx1080 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'0d\'00.\'01.\'02.\'03.\'04.\'05.\'06;}{\levelnumbers\'01\'03\'05\'07\'09\'0b\'0d;}\fbias0 
\fi-1440\li1440\jclisttab\tx1440 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'0f\'00.\'01.\'02.\'03.\'04.\'05.\'06.\'07;}{\levelnumbers\'01\'03\'05\'07\'09\'0b\'0d\'0f;}\fbias0 \fi-1440\li1440
\jclisttab\tx1440 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'11\'00.\'01.\'02.\'03.\'04.\'05.\'06.\'07.\'08;}{\levelnumbers\'01\'03\'05\'07\'09\'0b\'0d\'0f\'11;}\fbias0 \fi-1800\li1800\jclisttab\tx1800 
}{\listname ;}\listid1094352272}{\list\listtemplateid-80196704\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname 
;}\listid1203901792}{\list\listtemplateid-1479515186{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat2\levelspace0\levelindent0{\leveltext\'01\'00;}{\levelnumbers\'01;}\fbias0 \fi-480\li480\jclisttab\tx480 }{\listlevel\levelnfc0\leveljc0
\levelfollow0\levelstartat2\levelspace0\levelindent0{\leveltext\'03\'00.\'01;}{\levelnumbers\'01\'03;}\fbias0 \fi-480\li480\jclisttab\tx480 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat3\levelspace0\levelindent0{\leveltext
\'05\'00.\'01.\'02;}{\levelnumbers\'01\'03\'05;}\fbias0 \fi-720\li720\jclisttab\tx720 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'07\'00.\'01.\'02.\'03;}{\levelnumbers\'01\'03\'05\'07;}\fbias0 
\fi-720\li720\jclisttab\tx720 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'09\'00.\'01.\'02.\'03.\'04;}{\levelnumbers\'01\'03\'05\'07\'09;}\fbias0 \fi-1080\li1080\jclisttab\tx1080 }{\listlevel\levelnfc0
\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'0b\'00.\'01.\'02.\'03.\'04.\'05;}{\levelnumbers\'01\'03\'05\'07\'09\'0b;}\fbias0 \fi-1080\li1080\jclisttab\tx1080 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1
\levelspace0\levelindent0{\leveltext\'0d\'00.\'01.\'02.\'03.\'04.\'05.\'06;}{\levelnumbers\'01\'03\'05\'07\'09\'0b\'0d;}\fbias0 \fi-1440\li1440\jclisttab\tx1440 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext
\'0f\'00.\'01.\'02.\'03.\'04.\'05.\'06.\'07;}{\levelnumbers\'01\'03\'05\'07\'09\'0b\'0d\'0f;}\fbias0 \fi-1440\li1440\jclisttab\tx1440 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext
\'11\'00.\'01.\'02.\'03.\'04.\'05.\'06.\'07.\'08;}{\levelnumbers\'01\'03\'05\'07\'09\'0b\'0d\'0f\'11;}\fbias0 \fi-1800\li1800\jclisttab\tx1800 }{\listname ;}\listid1211572571}{\list\listtemplateid-1060856614{\listlevel\levelnfc0\leveljc0\levelfollow0
\levelstartat2\levelspace0\levelindent0{\leveltext\'01\'00;}{\levelnumbers\'01;}\fbias0 \fi-420\li420\jclisttab\tx420 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'03\'00.\'01;}{\levelnumbers\'01\'03;}
\fbias0 \fi-420\li420\jclisttab\tx420 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'05\'00.\'01.\'02;}{\levelnumbers\'01\'03\'05;}\fbias0 \fi-720\li720\jclisttab\tx720 }{\listlevel\levelnfc0\leveljc0
\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'07\'00.\'01.\'02.\'03;}{\levelnumbers\'01\'03\'05\'07;}\fbias0 \fi-720\li720\jclisttab\tx720 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext
\'09\'00.\'01.\'02.\'03.\'04;}{\levelnumbers\'01\'03\'05\'07\'09;}\fbias0 \fi-720\li720\jclisttab\tx720 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'0b\'00.\'01.\'02.\'03.\'04.\'05;}{\levelnumbers
\'01\'03\'05\'07\'09\'0b;}\fbias0 \fi-1080\li1080\jclisttab\tx1080 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'0d\'00.\'01.\'02.\'03.\'04.\'05.\'06;}{\levelnumbers\'01\'03\'05\'07\'09\'0b\'0d;}\fbias0 
\fi-1080\li1080\jclisttab\tx1080 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'0f\'00.\'01.\'02.\'03.\'04.\'05.\'06.\'07;}{\levelnumbers\'01\'03\'05\'07\'09\'0b\'0d\'0f;}\fbias0 \fi-1440\li1440
\jclisttab\tx1440 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'11\'00.\'01.\'02.\'03.\'04.\'05.\'06.\'07.\'08;}{\levelnumbers\'01\'03\'05\'07\'09\'0b\'0d\'0f\'11;}\fbias0 \fi-1440\li1440\jclisttab\tx1440 
}{\listname ;}\listid1283153751}{\list\listtemplateid-823337902\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname 
;}\listid1714380890}{\list\listtemplateid172384414{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fi-360\li360\jclisttab\tx360 }{\listlevel\levelnfc0\leveljc0\levelfollow0
\levelstartat3\levellegal\levelspace0\levelindent0{\leveltext\'03\'00.\'01;}{\levelnumbers\'01\'03;}\fbias0 \s0\fi-540\li540\jclisttab\tx540 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levellegal\levelspace0\levelindent0{\leveltext
\'05\'00.\'01.\'02;}{\levelnumbers\'01\'03\'05;}\fbias0 \s0\fi-720\li720\jclisttab\tx720 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levellegal\levelspace0\levelindent0{\leveltext\'07\'00.\'01.\'02.\'03;}{\levelnumbers\'01\'03\'05\'07;}
\fbias0 \s0\fi-720\li720\jclisttab\tx720 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levellegal\levelspace0\levelindent0{\leveltext\'09\'00.\'01.\'02.\'03.\'04;}{\levelnumbers\'01\'03\'05\'07\'09;}\fbias0 \s0\fi-1080\li1080
\jclisttab\tx1080 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levellegal\levelspace0\levelindent0{\leveltext\'0b\'00.\'01.\'02.\'03.\'04.\'05;}{\levelnumbers\'01\'03\'05\'07\'09\'0b;}\fbias0 \s0\fi-1080\li1080\jclisttab\tx1080 }{\listlevel
\levelnfc0\leveljc0\levelfollow0\levelstartat1\levellegal\levelspace0\levelindent0{\leveltext\'0d\'00.\'01.\'02.\'03.\'04.\'05.\'06;}{\levelnumbers\'01\'03\'05\'07\'09\'0b\'0d;}\fbias0 \s0\fi-1440\li1440\jclisttab\tx1440 }{\listlevel\levelnfc0\leveljc0
\levelfollow0\levelstartat1\levellegal\levelspace0\levelindent0{\leveltext\'0f\'00.\'01.\'02.\'03.\'04.\'05.\'06.\'07;}{\levelnumbers\'01\'03\'05\'07\'09\'0b\'0d\'0f;}\fbias0 \s0\fi-1440\li1440\jclisttab\tx1440 }{\listlevel\levelnfc0\leveljc0\levelfollow0
\levelstartat1\levellegal\levelspace0\levelindent0{\leveltext\'11\'00.\'01.\'02.\'03.\'04.\'05.\'06.\'07.\'08;}{\levelnumbers\'01\'03\'05\'07\'09\'0b\'0d\'0f\'11;}\fbias0 \s0\fi-1800\li1800\jclisttab\tx1800 }{\listname ;}\listid1817530264}
{\list\listtemplateid-823337902\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat2\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fs20\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1851329740}
{\list\listtemplateid67698703\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1903708086}}
{\*\listoverridetable{\listoverride\listid1283153751\listoverridecount0\ls1}{\listoverride\listid244648985\listoverridecount0\ls2}{\listoverride\listid1903708086\listoverridecount0\ls3}{\listoverride\listid1817530264\listoverridecount0\ls4}
{\listoverride\listid1094352272\listoverridecount0\ls5}{\listoverride\listid1211572571\listoverridecount0\ls6}{\listoverride\listid685257491\listoverridecount0\ls7}{\listoverride\listid1714380890\listoverridecount0\ls8}{\listoverride\listid81878428
\listoverridecount0\ls9}{\listoverride\listid1851329740\listoverridecount0\ls10}{\listoverride\listid1203901792\listoverridecount0\ls11}}{\*\revtbl {Unknown;}}{\info{\title CBFLIB}{\author Ellis}{\operator Ellis}{\creatim\yr1998\mo4\dy17\hr5\min7}
{\revtim\yr1998\mo4\dy17\hr5\min7}{\printim\yr1998\mo4\dy17\hr5\min6}{\version2}{\edmins0}{\nofpages69}{\nofwords6998}{\nofchars39891}{\*\company Stanford Synchrotron Radiation Laboratory}{\nofcharsws48988}{\vern71}}
\widowctrl\ftnbj\aenddoc\formshade\viewkind4\viewscale75\pgbrdrhead\pgbrdrfoot \fet0\sectd \linex0\titlepg\sectdefaultcl {\footer \pard\plain \s17\nowidctlpar\widctlpar\tqc\tx4320\tqr\tx8640\pvpara\phmrg\posxr\posy0\adjustright \fs20\cgrid 
{\field{\*\fldinst {\cs18 PAGE  }}{\fldrslt {\cs18\lang1024 4}}}{\cs18 
\par }\pard \s17\ri360\nowidctlpar\widctlpar\tqc\tx4320\tqr\tx8640\adjustright {
\par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}
{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8
\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \s15\qc\nowidctlpar\widctlpar\adjustright {\fs32 
\par 
\par 
\par CBFLIB
\par 
\par }\pard\plain \qc\nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs32\cgrid0 An ANSI-C API for Crystallographic Binary Files
\par }{\fs24\cgrid0 
\par Version 0.1
\par 
\par April 1998
\par 
\par 
\par 
\par 
\par 
\par Paul J. Ellis
\par 
\par Stanford Synchrotron Radiation Laboratory
\par 
\par ellis@ssrl.slac.stanford.edu.
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs24\cgrid0 \page 
\par }\pard\plain \s2\qc\keepn\nowidctlpar\widctlpar\outlinelevel1\adjustright \cgrid {\cgrid0 {\*\bkmkstart _Toc417354581}{\*\bkmkstart _Toc417355137}CBFLIB \'ad An ANSI-C API for Crystallographic Binary Files{\*\bkmkend _Toc417354581}
{\*\bkmkend _Toc417355137}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs24\cgrid0 
\par }\pard\plain \s2\qc\keepn\nowidctlpar\widctlpar\outlinelevel1\adjustright \cgrid {\fs22 {\*\bkmkstart _Toc417354582}{\*\bkmkstart _Toc417355138}Disclaimer Notice{\*\bkmkend _Toc417354582}{\*\bkmkend _Toc417355138}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22 
\par }\pard\plain \s28\nowidctlpar\widctlpar\adjustright \fs22\cgrid {
The items furnished herewith were developed under the sponsorship of the U.S. Government.  Neither the U.S., nor the U.S. D.O.E., nor the Leland Stanford Junior University, nor their employees, makes any warranty, express or implied, or assumes any liabil
i
ty or responsibility for accuracy, completeness or usefulness of any information, apparatus, product or process disclosed, or represents that its use will not infringe  privately-owned rights.  Mention of any product, its manufacturer, or suppliers shall 
not, nor is it intended to, imply approval, disapproval, or fitness for any particular use.  The U.S. and the University at all times retain the right to use and disseminate the furnished items for any purpose whatsoever.}{\fs24 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs16 
\par Notice 91 02 01
\par }{\fs24\cgrid0  
\par }\pard \qc\nowidctlpar\widctlpar\adjustright {\cgrid0 \page }{\fs22\cgrid0 Contents
\par }\pard \nowidctlpar\widctlpar\tx720\adjustright {\fs22\cgrid0 
\par }\pard\plain \s20\li202\sa120\nowidctlpar\widctlpar\tx720\tqr\tldot\tx8630\adjustright \fs22\lang1024\cgrid {\cgrid0  \tab }{\field\fldedit{\*\fldinst {\cgrid0  TOC \\o "1-3" }}{\fldrslt {Disclaimer Notice\tab }{\field{\*\fldinst { PAGEREF _Toc417355138 
\\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100330038000000}}}{\fldrslt {2}}}{
\par }\pard\plain \s19\sa120\nowidctlpar\widctlpar\tx720\tqr\tldot\tx8630\adjustright \fs20\cgrid {\fs22\lang1024 1.  \tab Introduction\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355139 \\h }{\fs22\lang1024 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100330039000000}}}{\fldrslt {\fs22\lang1024 5}}}{\fs22\lang1024 
\par }\pard \s19\nowidctlpar\widctlpar\tx720\tqr\tldot\tx8630\adjustright {\fs22\lang1024 2.  \tab Function descriptions\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355140 \\h }{\fs22\lang1024 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100340030000000}}}{\fldrslt {\fs22\lang1024 6}}}{\fs22\lang1024 
\par 2.1  \tab General description\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355141 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100340031000000}}}{\fldrslt 
{\fs22\lang1024 6}}}{\fs22\lang1024 
\par 2.1.1  \tab CBF handles\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355142 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100340032000000}}}{\fldrslt {
\fs22\lang1024 6}}}{\fs22\lang1024 
\par 2.1.2  \tab Return values\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355143 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100340033000000}}}{\fldrslt {
\fs22\lang1024 6}}}{\fs22\lang1024 
\par 2.2  \tab Reading and writing files containing binary sections\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355145 \\h }{\fs22\lang1024 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100340035000000}}}{\fldrslt {\fs22\lang1024 7}}}{\fs22\lang1024 
\par 2.2.1  \tab Reading binary sections\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355146 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100340036000000}}
}{\fldrslt {\fs22\lang1024 7}}}{\fs22\lang1024 
\par 2.2.2  \tab Writing binary section\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355147 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100340037000000}}
}{\fldrslt {\fs22\lang1024 7}}}{\fs22\lang1024 
\par 2.2.3  \tab Summary of reading and writing files containing binary sections\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355148 \\h }{\fs22\lang1024 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100340038000000}}}{\fldrslt {\fs22\lang1024 7}}}{\fs22\lang1024 
\par 2.3  \tab Function prototypes\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355149 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100340039000000}}}{\fldrslt 
{\fs22\lang1024 8}}}{\fs22\lang1024 
\par 2.3.1  \tab cbf_make_handle\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355150 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100350030000000}}}{\fldrslt {
\fs22\lang1024 8}}}{\fs22\lang1024 
\par 2.3.2  \tab cbf_free_handle\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355151 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100350031000000}}}{\fldrslt {
\fs22\lang1024 9}}}{\fs22\lang1024 
\par 2.3.3  \tab cbf_read_file\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355152 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100350032000000}}}{\fldrslt {
\fs22\lang1024 10}}}{\fs22\lang1024 
\par 2.3.4  \tab cbf_write_file\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355153 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100350033000000}}}{\fldrslt {
\fs22\lang1024 11}}}{\fs22\lang1024 
\par 2.3.5  \tab cbf_new_datablock\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355154 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100350034000000}}}{\fldrslt 
{\fs22\lang1024 12}}}{\fs22\lang1024 
\par 2.3.6  \tab cbf_new_category\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355155 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100350035000000}}}{\fldrslt {
\fs22\lang1024 13}}}{\fs22\lang1024 
\par 2.3.7  \tab cbf_new_column\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355156 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100350036000000}}}{\fldrslt {
\fs22\lang1024 14}}}{\fs22\lang1024 
\par 2.3.8  \tab cbf_new_row\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355158 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100350038000000}}}{\fldrslt {
\fs22\lang1024 15}}}{\fs22\lang1024 
\par 2.3.9  \tab cbf_insert_row\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355160 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100360030000000}}}{\fldrslt {
\fs22\lang1024 16}}}{\fs22\lang1024 
\par 2.3.10  \tab cbf_delete_row\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355162 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100360032000000}}}{\fldrslt {
\fs22\lang1024 17}}}{\fs22\lang1024 
\par 2.3.11  \tab cbf_set_datablockname\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355164 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100360034000000}}
}{\fldrslt {\fs22\lang1024 18}}}{\fs22\lang1024 
\par 2.3.12  \tab cbf_reset_datablocks\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355165 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100360035000000}}
}{\fldrslt {\fs22\lang1024 19}}}{\fs22\lang1024 
\par 2.3.13  \tab cbf_reset_datablock\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355166 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100360036000000}}
}{\fldrslt {\fs22\lang1024 20}}}{\fs22\lang1024 
\par 2.3.14  \tab cbf_reset_category\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355168 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100360038000000}}
}{\fldrslt {\fs22\lang1024 21}}}{\fs22\lang1024 
\par 2.3.15  \tab cbf_remove_datablock\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355170 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100370030000000}}
}{\fldrslt {\fs22\lang1024 22}}}{\fs22\lang1024 
\par 2.3.16  \tab cbf_remove_category\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355172 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100370032000000}}
}{\fldrslt {\fs22\lang1024 23}}}{\fs22\lang1024 
\par 2.3.17  \tab cbf_remove_column\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355174 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100370034000000}}
}{\fldrslt {\fs22\lang1024 24}}}{\fs22\lang1024 
\par 2.3.18  \tab cbf_remove_row\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355176 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100370036000000}}}{\fldrslt {
\fs22\lang1024 25}}}{\fs22\lang1024 
\par 2.3.19  \tab cbf_rewind_datablock\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355178 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100370038000000}}
}{\fldrslt {\fs22\lang1024 26}}}{\fs22\lang1024 
\par 2.3.20  \tab cbf_rewind_category\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355179 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100370039000000}}
}{\fldrslt {\fs22\lang1024 27}}}{\fs22\lang1024 
\par 2.3.21  \tab cbf_rewind_column\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355180 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100380030000000}}
}{\fldrslt {\fs22\lang1024 28}}}{\fs22\lang1024 
\par 2.3.22  \tab cbf_rewind_row\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355181 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100380031000000}}}{\fldrslt {
\fs22\lang1024 29}}}{\fs22\lang1024 
\par 2.3.23  \tab cbf_next_datablock\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355182 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100380032000000}}
}{\fldrslt {\fs22\lang1024 30}}}{\fs22\lang1024 
\par 2.3.24  \tab cbf_next_category\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355184 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100380034000000}}
}{\fldrslt {\fs22\lang1024 31}}}{\fs22\lang1024 
\par 2.3.25  \tab cbf_next_column\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355186 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100380036000000}}}{\fldrslt {
\fs22\lang1024 32}}}{\fs22\lang1024 
\par 2.3.26  \tab cbf_next_row\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355188 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100380038000000}}}{\fldrslt {
\fs22\lang1024 33}}}{\fs22\lang1024 
\par 2.3.27  \tab cbf_find_datablock\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355189 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100380039000000}}
}{\fldrslt {\fs22\lang1024 34}}}{\fs22\lang1024 
\par 2.3.28  \tab cbf_find_category\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355191 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100390031000000}}
}{\fldrslt {\fs22\lang1024 35}}}{\fs22\lang1024 
\par 2.3.29  \tab cbf_find_column\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355193 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100390033000000}}}{\fldrslt {
\fs22\lang1024 36}}}{\fs22\lang1024 
\par 2.3.30  \tab cbf_find_row\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355195 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100390035000000}}}{\fldrslt {
\fs22\lang1024 37}}}{\fs22\lang1024 
\par 2.3.31  \tab cbf_find_nextrow\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355196 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100390036000000}}}{\fldrslt 
{\fs22\lang1024 38}}}{\fs22\lang1024 
\par 2.3.32  \tab cbf_count_datablocks\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355197 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100390037000000}}
}{\fldrslt {\fs22\lang1024 39}}}{\fs22\lang1024 
\par 2.3.33  \tab cbf_count_categories\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355198 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100390038000000}}
}{\fldrslt {\fs22\lang1024 40}}}{\fs22\lang1024 
\par 2.3.34  \tab cbf_count_columns\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355199 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003100390039000000}}
}{\fldrslt {\fs22\lang1024 41}}}{\fs22\lang1024 
\par 2.3.35  \tab cbf_count_rows\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355200 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003200300030000000}}}{\fldrslt {
\fs22\lang1024 42}}}{\fs22\lang1024 
\par 2.3.36  \tab cbf_select_datablock\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355201 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003200300031000000}}
}{\fldrslt {\fs22\lang1024 43}}}{\fs22\lang1024 
\par 2.3.37  \tab cbf_select_category\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355203 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003200300033000000}}
}{\fldrslt {\fs22\lang1024 44}}}{\fs22\lang1024 
\par 2.3.38  \tab cbf_select_column\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355205 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003200300035000000}}
}{\fldrslt {\fs22\lang1024 45}}}{\fs22\lang1024 
\par 2.3.39  \tab cbf_select_row\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355207 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003200300037000000}}}{\fldrslt {
\fs22\lang1024 46}}}{\fs22\lang1024 
\par 2.3.40  \tab cbf_datablock_name\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355209 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003200300039000000}}
}{\fldrslt {\fs22\lang1024 47}}}{\fs22\lang1024 
\par 2.3.41  \tab cbf_category_name\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355210 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003200310030000000}}
}{\fldrslt {\fs22\lang1024 48}}}{\fs22\lang1024 
\par 2.3.42  \tab cbf_column_name\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355211 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003200310031000000}}}{\fldrslt {
\fs22\lang1024 49}}}{\fs22\lang1024 
\par 2.3.43  \tab cbf_row_number\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355212 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003200310032000000}}}{\fldrslt {
\fs22\lang1024 50}}}{\fs22\lang1024 
\par 2.3.44  \tab cbf_get_value\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355214 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003200310034000000}}}{\fldrslt {
\fs22\lang1024 51}}}{\fs22\lang1024 
\par 2.3.45  \tab cbf_set_value\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355216 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003200310036000000}}}{\fldrslt {
\fs22\lang1024 52}}}{\fs22\lang1024 
\par 2.3.46  \tab cbf_get_integervalue\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355218 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003200310038000000}}
}{\fldrslt {\fs22\lang1024 53}}}{\fs22\lang1024 
\par 2.3.47  \tab cbf_set_integervalue\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355219 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003200310039000000}}
}{\fldrslt {\fs22\lang1024 54}}}{\fs22\lang1024 
\par 2.3.48  \tab cbf_get_doublevalue\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355221 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003200320031000000}}
}{\fldrslt {\fs22\lang1024 55}}}{\fs22\lang1024 
\par 2.3.49  \tab cbf_set_doublevalue\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355222 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003200320032000000}}
}{\fldrslt {\fs22\lang1024 56}}}{\fs22\lang1024 
\par 2.3.50  \tab cbf_get_integerarrayparameters\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355224 \\h }{\fs22\lang1024 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003200320034000000}}}{\fldrslt {\fs22\lang1024 57}}}{\fs22\lang1024 
\par 2.3.51  \tab cbf_get_integerarray\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355225 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003200320035000000}}
}{\fldrslt {\fs22\lang1024 58}}}{\fs22\lang1024 
\par 2.3.52  \tab cbf_set_integerarray\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355226 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003200320036000000}}
}{\fldrslt {\fs22\lang1024 60}}}{\fs22\lang1024 
\par 2.3.53  \tab cbf_failnez\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355227 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003200320037000000}}}{\fldrslt {
\fs22\lang1024 62}}}{\fs22\lang1024 
\par }\pard \s19\sa120\nowidctlpar\widctlpar\tx720\tqr\tldot\tx8630\adjustright {\fs22\lang1024 2.3.54  \tab cbf_onfailnez\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355228 \\h }{\fs22\lang1024 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003200320038000000}}}{\fldrslt {\fs22\lang1024 63}}}{\fs22\lang1024 
\par }\pard \s19\nowidctlpar\widctlpar\tx720\tqr\tldot\tx8630\adjustright {\fs22\lang1024 3.  \tab File format\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355229 \\h }{\fs22\lang1024 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003200320039000000}}}{\fldrslt {\fs22\lang1024 64}}}{\fs22\lang1024 
\par 3.1  \tab General description\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355230 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003200330030000000}}}{\fldrslt 
{\fs22\lang1024 64}}}{\fs22\lang1024 
\par 3.2  \tab Format of the binary sections\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355231 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003200330031000000}}
}{\fldrslt {\fs22\lang1024 64}}}{\fs22\lang1024 
\par 3.3  \tab Compression schemes\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355237 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003200330037000000}}}{\fldrslt 
{\fs22\lang1024 66}}}{\fs22\lang1024 
\par 3.3.1  \tab Canonical-code compression\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355238 \\h }{\fs22\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003200330038000000}}
}{\fldrslt {\fs22\lang1024 66}}}{\fs22\lang1024 
\par }\pard \s19\sa120\nowidctlpar\widctlpar\tx720\tqr\tldot\tx8630\adjustright {\fs22\lang1024 3.3.2  \tab CCP4-style compression\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Toc417355241 \\h }{\fs22\lang1024 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400310037003300350035003200340031000000}}}{\fldrslt {\fs22\lang1024 67}}}{\fs22\lang1024 
\par 4.  \tab Source files\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Ref417410155 }}{\fldrslt {\fs22\lang1024 68}}}{\fs22\lang1024 
\par 5.  \tab Example program\tab }{\field{\*\fldinst {\fs22\lang1024  PAGEREF _Ref417410320 }}{\fldrslt {\fs22\lang1024 69}}}{\fs22\lang1024 
\par }\pard\plain \sa120\nowidctlpar\widctlpar\tx720\adjustright \fs20\cgrid {\fs22\lang1024 
\par }\pard \nowidctlpar\widctlpar\tx720\adjustright }}\pard\plain \nowidctlpar\widctlpar\tx720\adjustright \fs20\cgrid {\fs22\cgrid0 
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\page }{\fs22 {\*\bkmkstart _Toc417354583}{\*\bkmkstart _Toc417355139}1.  Introduction{\*\bkmkend _Toc417354583}{\*\bkmkend _Toc417355139}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22 
\par CBFLIB is a library of ANSI-C functions providing a simple mechanism for accessing Crystallographic Binary Files (CBF files).  The CBFLIB API is loosely based on the CIFPARSE API for mmCIF files.}{\fs22\cgrid0 
  Like CIFPARSE, CBFLIB does not perform any semantic integrity checks and simply provides functions to create, read, modify and write CBF data files.}{\fs22 
\par }\pard\plain \s16\sl360\slmult0\nowidctlpar\widctlpar\adjustright \fs28\lang3081\cgrid {\fs22 
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 \page {\*\bkmkstart _Toc417354584}{\*\bkmkstart _Toc417355140}2.  Function descriptions{\*\bkmkend _Toc417354584}{\*\bkmkend _Toc417355140}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22  
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 {\*\bkmkstart _Toc417354585}{\*\bkmkstart _Toc417355141}2.1  General description{\*\bkmkend _Toc417354585}{\*\bkmkend _Toc417355141}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22 
\par Almost all of the CBFLIB functions receive a value of type cbf_handle (a CBF handle) as the first argument.
\par 
\par All functions return an integer equal to 0 for success or an error code for failure.
\par 
\par 
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 {\*\bkmkstart _Toc417355142}2.1.1  CBF handles{\*\bkmkend _Toc417355142}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22 
\par CBFLIB permits a program to use multiple CBF objects simultaneously.  To identify the CBF object on which a function will operate, CBFLIB uses a value of type cbf_handle.
\par 
\par All functions in the library except cbf_make_handle expect a value of type cbf_handle as the first argument.
\par 
\par The function cbf_make_handle creates and initializes a new CBF handle.
\par 
\par The function cbf_free_handle destroys a handle and frees all memory associated with the corresponding CBF object.
\par 
\par 
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 {\*\bkmkstart _Toc417355143}2.1.2  Return values{\*\bkmkend _Toc417355143}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\b\fs22 }{\fs22 All of the CBFLIB functions return 0 on success and an error code on failure.
\par 
\par The error codes are:
\par 
\par }\pard \fi-2520\li2880\nowidctlpar\widctlpar\adjustright {\fs22 CBF_FORMAT\tab The file format is invalid
\par CBF_ALLOC\tab Memory allocation failed
\par }\pard\plain \s3\fi-2520\li2880\keepn\nowidctlpar\widctlpar\outlinelevel2\adjustright \cgrid {\fs22 {\*\bkmkstart _Toc417354586}{\*\bkmkstart _Toc417355144}CBF_ARGUMENT\tab Invalid function argument{\*\bkmkend _Toc417354586}{\*\bkmkend _Toc417355144}

\par }\pard\plain \fi-2520\li2880\nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22 CBF_ASCII\tab The value is ASCII (not binary)
\par CBF_BINARY\tab The value is binary (not ASCII)
\par CBF_BITCOUNT\tab The expected number of bits does not match the actual number written
\par CBF_ENDOFDATA\tab The end of the data was reached before the end of the array
\par CBF_FILECLOSE\tab File close error
\par CBF_FILEOPEN\tab File open error
\par CBF_FILEREAD\tab File read error
\par CBF_FILESEEK\tab File seek error
\par CBF_FILETELL\tab File tell error
\par CBF_FILEWRITE\tab File write error
\par CBF_IDENTICAL\tab A data block with the new name already exists
\par CBF_NOTFOUND\tab The data block, category, column or row does not exist
\par CBF_OVERFLOW\tab The number read cannot fit into the destination argument.  The destination has been set to the nearest value.
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22 
\par If more than one error has occurred, the error code is the logical OR of the individual error codes.
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 {\*\bkmkstart _Toc417355145}\page 2.2  Reading and writing files containing binary sections{\*\bkmkend _Toc417355145}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22 
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 {\*\bkmkstart _Toc417355146}2.2.1  Reading binary sections{\*\bkmkend _Toc417355146}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22 
\par The current version of CBFLIB only decompresses a binary section from disk when requested by the program.
\par 
\par When a file containing one or more binary sections is read, CBFLIB saves the file pointer and the position of the binary section within the file and then jumps past the binary section.  When the prog
ram attempts to access the binary data, CBFLIB sets the file position back to the start of the binary section and then reads the data.
\par 
\par For this scheme to work:
\par 
\par {\pntext\pard\plain\fs22\cgrid \hich\af0\dbch\af0\loch\f0 1.\tab}}\pard \fi-360\li540\nowidctlpar\widctlpar{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\ls3\adjustright {\fs22 
The file must be a random-access file opened in binary mode (fopen (\'85, \ldblquote rb\rdblquote )).
\par {\pntext\pard\plain\fs22\cgrid \hich\af0\dbch\af0\loch\f0 2.\tab}}\pard \fi-360\li540\nowidctlpar\widctlpar{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\ls3\adjustright {\fs22 The program }{\i\fs22 must not}{\fs22 
 close the file.  CBFLIB will close the file using fclose (\'85) when it is no longer needed.
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22 
\par At present, this also means that a program can\rquote t read a file and then write back to the same file.   This restriction will be eliminated in a future version.
\par 
\par 
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 {\*\bkmkstart _Toc417355147}2.2.2  Writing binary section{\*\bkmkend _Toc417355147}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22 
\par When a program passes CBFLIB a binary value, the data is compressed to a temporary file.  If the CBF object is subsequently written to a file, the data is simply copied from the temporary file to the output file.
\par 
\par The output
 file can be of any type.  If the program indicates to CBFLIB that the file is a random-access and readable, CBFLIB will conserve disk space by closing the temporary file and using the output file as the location at which the binary value is stored.

\par 
\par For this option to work:
\par 
\par {\listtext\pard\plain\fs22\cgrid \hich\af0\dbch\af0\loch\f0 1.\tab}}\pard \fi-360\li540\nowidctlpar\widctlpar\ls4\adjustright {\fs22 The file must be a random-access file opened in binary update mode (fopen (\'85, \ldblquote w+b\rdblquote )).
\par {\listtext\pard\plain\fs22\cgrid \hich\af0\dbch\af0\loch\f0 2.\tab}The program }{\i\fs22 must not}{\fs22  close the file.  CBFLIB will close the file using fclose (\'85) when it is no longer needed.
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22 
\par If this option is not used:
\par 
\par }\pard \fi-360\li540\nowidctlpar\widctlpar\adjustright {\fs22 1.\tab CBFLIB will continue using the temporary file.
\par 2.\tab CBFLIB }{\i\fs22 will not}{\fs22  close the file.  This is the responsibility of the main program.
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22 
\par 
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 {\*\bkmkstart _Toc417355148}2.2.3  Summary of reading and writing files containing binary sections{\*\bkmkend _Toc417355148}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22 
\par {\listtext\pard\plain\fs22\cgrid \hich\af0\dbch\af0\loch\f0 1.\tab}}\pard \fi-360\li540\nowidctlpar\widctlpar\ls7\adjustright {\fs22 Open disk files to read using the mode \ldblquote rb\rdblquote .  
\par {\listtext\pard\plain\fs22\cgrid \hich\af0\dbch\af0\loch\f0 2.\tab}If possible, open disk files to write using the mode \ldblquote w+b\rdblquote  and tell CBFLIB that it can use the file as a buffer.
\par {\listtext\pard\plain\fs22\cgrid \hich\af0\dbch\af0\loch\f0 3.\tab}Do }{\i\fs22 not}{\fs22  close any files read by CBFLIB or written by CBFLIB with buffering turned on.
\par {\listtext\pard\plain\fs22\cgrid \hich\af0\dbch\af0\loch\f0 4.\tab}Do }{\i\fs22 not}{\fs22  attempt to read from a file, then write to the same file.
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 \page {\*\bkmkstart _Toc417355149}2.3  Function prototypes{\*\bkmkend _Toc417355149}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 {\*\bkmkstart _Toc417355150}2.3.1  cbf_make_handle{\*\bkmkend _Toc417355150} 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_make_handle (cbf_handle *handle); 
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_make_handle creates and initializes a new internal CBF object.  All other CBFLIB functions operating on this object receive the CBF handle as the first argument. 
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1080\li1080\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab Pointer to a CBF handle.
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_free_handle
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 \page {\*\bkmkstart _Toc417355151}2.3.2  cbf_free_handle{\*\bkmkend _Toc417355151} 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_free_handle (cbf_handle handle); 
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_free_handle destroys the CBF object specified by the handle and frees all associated memory. 
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1080\li1080\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle to free. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_make_handle
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 \page {\*\bkmkstart _Toc417355152}2.3.3  cbf_read_file{\*\bkmkend _Toc417355152} 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_read_file (cbf_handle handle, FILE *file); 
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_read_file reads the CBF or CIF file }{\i\fs22\cgrid0 file}{\fs22\cgrid0  into the CBF object specified by }{\i\fs22\cgrid0 handle}{\fs22\cgrid0 .
\par 
\par CBFLIB defers reading binary sections as long as possible.  In the current version of CBFLIB, this means that:
\par }{\fs22 
\par {\pntext\pard\plain\fs22\cgrid \hich\af0\dbch\af0\loch\f0 1.\tab}}\pard \fi-360\li540\nowidctlpar\widctlpar{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\ls11\adjustright {\fs22 
The file must be a random-access file opened in binary mode (fopen (\'85, \ldblquote rb\rdblquote )).
\par {\pntext\pard\plain\fs22\cgrid \hich\af0\dbch\af0\loch\f0 2.\tab}}\pard \fi-360\li540\nowidctlpar\widctlpar{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\ls11\adjustright {\fs22 The program }{\i\fs22 must not}{\fs22 
 close the file.  CBFLIB will close the file using fclose (\'85) when it is no longer needed.
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22 
\par }{\fs22\cgrid0 These restrictions may change in a future release.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1080\li1080\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle. 
\par file:\tab Pointer to a file descriptor. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_write_file
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 \page {\*\bkmkstart _Toc417355153}2.3.4  cbf_write_file{\*\bkmkend _Toc417355153} 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_write_file (cbf_handle handle, FILE *file, int isbuffer); 
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_write_file writes the CBF object specified by }{\i\fs22\cgrid0 handle}{\fs22\cgrid0  into the file }{\i\fs22\cgrid0 file}{\fs22\cgrid0 .
\par 
\par Unlike cbf_read_file, the file does not have to be random-access.
\par 
\par If the file is random-access and readable, }{\i\fs22\cgrid0 isbuffer}{\fs22\cgrid0  can be set to non-0 to indicate to CBFLIB that the file can be used as a buffer to conserve disk space.  If the file is not random-access or not readable, }{
\i\fs22\cgrid0 isbuffer}{\fs22\cgrid0  must be 0.
\par 
\par If }{\i\fs22\cgrid0 isbuffer}{\fs22\cgrid0  is non-0, CBFLIB will close the file when it is no longer required, otherwise this is the responsibility of the program.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1080\li1080\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle. 
\par file:\tab Pointer to a file descriptor. 
\par readable:\tab If non-0: this file is random-access and readable and can be used as a buffer.
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_read_file
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 \page {\*\bkmkstart _Toc417355154}2.3.5  cbf_new_datablock{\*\bkmkend _Toc417355154}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_new_datablock (cbf_handle handle, const char *datablockname);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_new_datablock creates a new data block with name }{\i\fs22\cgrid0 datablockname}{\fs22\cgrid0  and makes it the current data block.
\par 
\par If a data block with this name already exists, the existing data block becomes the current data block.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle. 
\par datablockname:\tab The name of the new data block. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_new_category
\par cbf_new_column
\par cbf_new_row
\par cbf_insert_row
\par cbf_set_datablockname
\par cbf_remove_datablock
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 \page {\*\bkmkstart _Toc417355155}2.3.6  cbf_new_category{\*\bkmkend _Toc417355155}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_new_category (cbf_handle handle, const char *categoryname);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_new_category creates a new category in the current data block with name }{\i\fs22\cgrid0 categoryname}{\fs22\cgrid0  and makes it the current category.
\par 
\par If a category with this name already exists, the existing category becomes the current category.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle. 
\par categoryname:\tab The name of the new category. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_new_datablock
\par cbf_new_column
\par cbf_new_row
\par cbf_insert_row
\par cbf_remove_category
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 \page {\*\bkmkstart _Toc417355156}2.3.7  cbf_new_column{\*\bkmkend _Toc417355156}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_new_column (cbf_handle handle, const char *columnname);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_new_column creates a new column in the current category with name }{\i\fs22\cgrid0 columnname}{\fs22\cgrid0  and makes it the current column.
\par 
\par If a column with this name already exists, the existing column becomes the current category.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle. 
\par columnname:\tab The name of the new column. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_new_datablock
\par cbf_new_category
\par cbf_new_row
\par cbf_insert_row
\par cbf_remove_column
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 \page {\*\bkmkstart _Toc417355158}2.3.8  cbf_new_row{\*\bkmkend _Toc417355158}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_new_row (cbf_handle handle);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_new_row adds a new row to the current category and makes it the current row.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_new_datablock
\par cbf_new_category
\par cbf_new_column
\par cbf_insert_row
\par cbf_delete_row
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 {\*\bkmkstart _Toc417355159}cbf_remove_row{\*\bkmkend _Toc417355159} \page {\*\bkmkstart _Toc417355160}2.3.9  cbf_insert_row{\*\bkmkend _Toc417355160}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_insert_row (cbf_handle handle, unsigned int rownumber);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_insert_row adds a new row to the current category.  The new row is inserted as row }{\i\fs22\cgrid0 rownumber}{\fs22\cgrid0  and existing rows starting from }{\i\fs22\cgrid0 rownumber}{\fs22\cgrid0 
 are moved up by 1.  The new row becomes the current row.
\par 
\par If the category has fewer than }{\i\fs22\cgrid0 rownumber}{\fs22\cgrid0  rows, the function returns CBF_NOTFOUND.
\par 
\par The row numbers start from 0.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle. 
\par rownumber:\tab The row number of the new row.
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_new_datablock
\par cbf_new_category
\par cbf_new_column
\par cbf_new_row
\par cbf_delete_row
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 {\*\bkmkstart _Toc417355161}cbf_remove_row{\*\bkmkend _Toc417355161} \page {\*\bkmkstart _Toc417355162}2.3.10  cbf_delete_row{\*\bkmkend _Toc417355162}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_delete_row (cbf_handle handle, unsigned int rownumber);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_delete_row deletes a row from the current category.  Rows starting from }{\i\fs22\cgrid0 rownumber}{\fs22\cgrid0 +1 are moved down by 1.  If the current row was higher than }{\i\fs22\cgrid0 rownumber}{\fs22\cgrid0 , or if the current 
row is the last row, it will also move down by 1.
\par 
\par The row numbers start from 0.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle. 
\par rownumber:\tab The number of the row to delete.
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_new_row
\par cbf_insert_row
\par cbf_remove_datablock
\par cbf_remove_category
\par cbf_remove_column
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 {\*\bkmkstart _Toc417355163}cbf_remove_row{\*\bkmkend _Toc417355163} \page {\*\bkmkstart _Toc417355164}2.3.11  cbf_set_datablockname{\*\bkmkend _Toc417355164}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_set_datablockname (cbf_handle handle, const char *datablockname);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par }{\fs22 cbf_set_datablockname}{\fs22\cgrid0  changes the name of the current data block to }{\i\fs22\cgrid0 datablockname}{\fs22\cgrid0 .  
\par 
\par If a data block with this name already exists (comparison is case-insensitive), the function returns CBF_IDENTICAL.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle. 
\par datablockname:\tab The new data block name.
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_new_datablock
\par cbf_reset_datablocks
\par cbf_reset_datablock
\par cbf_remove_datablock
\par cbf_datablock_name
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 \page {\*\bkmkstart _Toc417355165}2.3.12  cbf_reset_datablocks{\*\bkmkend _Toc417355165}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_reset_datablocks (cbf_handle handle);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_reset_datablocks deletes all categories from all data blocks.
\par 
\par The current data block does not change.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_reset_datablock
\par cbf_remove_category
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 \page {\*\bkmkstart _Toc417355166}2.3.13  cbf_reset_datablock{\*\bkmkend _Toc417355166}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_reset_datablock (cbf_handle handle);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_reset_datablock deletes all categories from the current data block.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_reset_datablocks
\par cbf_remove_category
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 \page {\*\bkmkstart _Toc417355168}2.3.14  cbf_reset_category{\*\bkmkend _Toc417355168}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_reset_category (cbf_handle handle);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_reset_category deletes all columns and rows from current category.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_reset_category
\par cbf_remove_column
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 {\*\bkmkstart _Toc417355169}cbf_remove_row{\*\bkmkend _Toc417355169} \page {\*\bkmkstart _Toc417355170}2.3.15  cbf_remove_datablock{\*\bkmkend _Toc417355170}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_remove_datablock (cbf_handle handle);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_remove_datablock deletes the current data block.
\par 
\par The current data block becomes undefined.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_new_datablock
\par cbf_remove_category
\par cbf_remove_column
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 {\*\bkmkstart _Toc417355171}cbf_remove_row{\*\bkmkend _Toc417355171} \page {\*\bkmkstart _Toc417355172}2.3.16  cbf_remove_category{\*\bkmkend _Toc417355172}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_remove_category (cbf_handle handle);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_remove_category deletes the current category.
\par 
\par The current category becomes undefined.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_new_category
\par cbf_remove_datablock
\par cbf_remove_column
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 {\*\bkmkstart _Toc417355173}cbf_remove_row{\*\bkmkend _Toc417355173} \page {\*\bkmkstart _Toc417355174}2.3.17  cbf_remove_column{\*\bkmkend _Toc417355174}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_remove_column (cbf_handle handle);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_remove_column deletes the current column.
\par 
\par The current column becomes undefined.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_new_column
\par cbf_remove_datablock
\par cbf_remove_category
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 {\*\bkmkstart _Toc417355175}cbf_remove_row{\*\bkmkend _Toc417355175} \page {\*\bkmkstart _Toc417355176}2.3.18  cbf_remove_row{\*\bkmkend _Toc417355176}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_remove_row (cbf_handle handle);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_remove_row deletes the current row in the current category.
\par 
\par If the current row was the last row, it will move down by 1, otherwise, it will remain the same.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_new_row
\par cbf_insert_row
\par cbf_remove_datablock
\par cbf_remove_category
\par cbf_remove_column
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 {\*\bkmkstart _Toc417355177}cbf_delete_row{\*\bkmkend _Toc417355177} \page {\*\bkmkstart _Toc417355178}2.3.19  cbf_rewind_datablock{\*\bkmkend _Toc417355178}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_rewind_datablock (cbf_handle handle);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_rewind_datablock makes the first data block the current data block.  
\par 
\par If there are no data blocks, the function returns CBF_NOTFOUND.
\par 
\par The current category becomes undefined.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_rewind_category
\par cbf_rewind_column
\par cbf_rewind_row
\par cbf_next_datablock
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 \page {\*\bkmkstart _Toc417355179}2.3.20  cbf_rewind_category{\*\bkmkend _Toc417355179}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_rewind_category (cbf_handle handle);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_rewind_category makes the first category in the current data block the current category.  
\par 
\par If there are no categories, the function returns CBF_NOTFOUND.
\par 
\par The current column and row become undefined.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_rewind_datablock
\par cbf_rewind_column
\par cbf_rewind_row
\par cbf_next_category
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 \page {\*\bkmkstart _Toc417355180}2.3.21  cbf_rewind_column{\*\bkmkend _Toc417355180}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_rewind_column (cbf_handle handle);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_rewind_column makes the first column in the current category the current column.  
\par 
\par If there are no columns, the function returns CBF_NOTFOUND.
\par 
\par The current row is not affected.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_rewind_datablock
\par cbf_rewind_category
\par cbf_rewind_row
\par cbf_next_column
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 \page {\*\bkmkstart _Toc417355181}2.3.22  cbf_rewind_row{\*\bkmkend _Toc417355181}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_rewind_row (cbf_handle handle);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_rewind_row makes the first row in the current category the current row.  
\par 
\par If there are no rows, the function returns CBF_NOTFOUND.
\par 
\par The current column is not affected.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_rewind_datablock
\par cbf_rewind_category
\par cbf_rewind_column
\par cbf_next_row
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 \page {\*\bkmkstart _Toc417355182}2.3.23  cbf_next_datablock{\*\bkmkend _Toc417355182}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_next_datablock (cbf_handle handle);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_next_datablock makes the data block following the current data block the current data block.
\par 
\par If there are no more data blocks, the function returns CBF_NOTFOUND.
\par 
\par The current category becomes undefined.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_rewind_datablock
\par cbf_next_category
\par cbf_next_column
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 {\*\bkmkstart _Toc417355183}cbf_next_row{\*\bkmkend _Toc417355183} \page {\*\bkmkstart _Toc417355184}2.3.24  cbf_next_category{\*\bkmkend _Toc417355184}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_next_category (cbf_handle handle);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_next_category makes the category following the current category in the current data block the current category.
\par 
\par If there are no more categories, the function returns CBF_NOTFOUND.
\par 
\par The current column and row become undefined.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_rewind_category
\par cbf_next_datablock
\par cbf_next_column
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 {\*\bkmkstart _Toc417355185}cbf_next_row{\*\bkmkend _Toc417355185} \page {\*\bkmkstart _Toc417355186}2.3.25  cbf_next_column{\*\bkmkend _Toc417355186}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_next_column (cbf_handle handle);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_next_column makes the column following the current column in the current category the current column.
\par 
\par If there are no more columns, the function returns CBF_NOTFOUND.
\par 
\par The current row is not affected.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_rewind_column
\par cbf_next_datablock
\par cbf_next_category
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 {\*\bkmkstart _Toc417355187}cbf_next_row{\*\bkmkend _Toc417355187} \page {\*\bkmkstart _Toc417355188}2.3.26  cbf_next_row{\*\bkmkend _Toc417355188}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_next_row (cbf_handle handle);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_next_row makes the row following the current row in the current category the current row.
\par 
\par If there are no more rows, the function returns CBF_NOTFOUND.
\par 
\par The current column is not affected.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_rewind_row
\par cbf_next_datablock
\par cbf_next_category
\par cbf_next_column
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 \page {\*\bkmkstart _Toc417355189}2.3.27  cbf_find_datablock{\*\bkmkend _Toc417355189}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_find_datablock (cbf_handle handle, const char *datablockname);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_find_datablock makes the data block with name }{\i\fs22\cgrid0 datablockname}{\fs22\cgrid0  the current data block.
\par 
\par The comparison is case-insensitive.
\par 
\par If the data block does not exist, the function returns CBF_NOTFOUND.
\par 
\par The current category becomes undefined.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle. 
\par datablockname:\tab The name of the data block to find.
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_rewind_datablock
\par cbf_next_datablock
\par cbf_find_category
\par cbf_find_column
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 {\*\bkmkstart _Toc417355190}cbf_find_row{\*\bkmkend _Toc417355190}
\par cbf_datablock_name \page {\*\bkmkstart _Toc417355191}2.3.28  cbf_find_category{\*\bkmkend _Toc417355191}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_find_category (cbf_handle handle, const char *categoryname);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_find_category makes the category in the current data block with name }{\i\fs22\cgrid0 categoryname}{\fs22\cgrid0  the current category.
\par 
\par The comparison is case-insensitive.
\par 
\par If the category does not exist, the function returns CBF_NOTFOUND.
\par 
\par The current column and row become undefined.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle. 
\par categoryname:\tab The name of the category to find.
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_rewind_category
\par cbf_next_category
\par cbf_find_datablock
\par cbf_find_column
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 {\*\bkmkstart _Toc417355192}cbf_find_row{\*\bkmkend _Toc417355192}
\par cbf_category_name \page {\*\bkmkstart _Toc417355193}2.3.29  cbf_find_column{\*\bkmkend _Toc417355193}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_find_column (cbf_handle handle, const char *columnname);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_find_column makes the columns in the current category with name }{\i\fs22\cgrid0 columnname}{\fs22\cgrid0  the current column.
\par 
\par The comparison is case-insensitive.
\par 
\par If the column does not exist, the function returns CBF_NOTFOUND.
\par 
\par The current row is not affected.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle. 
\par columnname:\tab The name of column to find.
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_rewind_column
\par cbf_next_column
\par cbf_find_datablock
\par cbf_find_category
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 {\*\bkmkstart _Toc417355194}cbf_find_row{\*\bkmkend _Toc417355194}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22 cbf_column_name}{
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 \page {\*\bkmkstart _Toc417355195}2.3.30  cbf_find_row{\*\bkmkend _Toc417355195}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_find_row (cbf_handle handle, const char *value);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_find_row makes the first row in the current column with value }{\i\fs22\cgrid0 value}{\fs22\cgrid0  the current row.
\par 
\par The comparison is case-sensitive.
\par 
\par If a matching row does not exist, the function returns CBF_NOTFOUND.
\par 
\par The current column is not affected.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle.
\par value:\tab The value of the row to find. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_rewind_row
\par cbf_next_row
\par cbf_find_datablock
\par cbf_find_category
\par cbf_find_column
\par cbf_find_nextrow
\par cbf_get_value
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 \page {\*\bkmkstart _Toc417355196}2.3.31  cbf_find_nextrow{\*\bkmkend _Toc417355196}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_find_nextrow (cbf_handle handle, const char *value);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_find_nextrow makes the makes the next row in the current column with value }{\i\fs22\cgrid0 value}{\fs22\cgrid0 
 the current row.  The search starts from the row following the last row found with cbf_find_row or cbf_find_nextrow, or from the current row if the current row was defined using any other function.
\par 
\par The comparison is case-sensitive.
\par 
\par If no more matching rows exist, the function returns CBF_NOTFOUND.
\par 
\par The current column is not affected.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle.
\par value:\tab the value to search for. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_rewind_row
\par cbf_next_row
\par cbf_find_datablock
\par cbf_find_category
\par cbf_find_column
\par cbf_find_row
\par cbf_get_value
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 \page {\*\bkmkstart _Toc417355197}2.3.32  cbf_count_datablocks{\*\bkmkend _Toc417355197}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_count_datablocks (cbf_handle handle, unsigned int *datablocks);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_count_datablocks puts the number of data blocks in *}{\i\fs22\cgrid0 datablocks}{\fs22\cgrid0 .
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle.
\par datablocks:\tab Pointer to the destination data block count. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_count_categories
\par cbf_count_columns
\par cbf_count_rows
\par cbf_select_datablock
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 \page {\*\bkmkstart _Toc417355198}2.3.33  cbf_count_categories{\*\bkmkend _Toc417355198}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_count_categories (cbf_handle handle, unsigned int *categories);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_count_categories puts the number of categories in the current data block in *}{\i\fs22\cgrid0 categories}{\fs22\cgrid0 .
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle.
\par categories:\tab Pointer to the destination category count. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_count_datablocks
\par cbf_count_columns
\par cbf_count_rows
\par cbf_select_category
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 \page {\*\bkmkstart _Toc417355199}2.3.34  cbf_count_columns{\*\bkmkend _Toc417355199}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_count_columns (cbf_handle handle, unsigned int *columns);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_count_columns puts the number of columns in the current category in *}{\i\fs22\cgrid0 columns}{\fs22\cgrid0 .
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle.
\par columns:\tab Pointer to the destination column count. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_count_datablocks
\par cbf_count_categories
\par cbf_count_rows
\par cbf_select_column
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 \page {\*\bkmkstart _Toc417355200}2.3.35  cbf_count_rows{\*\bkmkend _Toc417355200}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_count_rows (cbf_handle handle, unsigned int *rows);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_count_rows puts the number of rows in the current category in *}{\i\fs22\cgrid0 rows}{\fs22\cgrid0 .
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle.
\par rows:\tab Pointer to the destination row count. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_count_datablocks
\par cbf_count_categories
\par cbf_count_columns
\par cbf_select_row
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 \page {\*\bkmkstart _Toc417355201}2.3.36  cbf_select_datablock{\*\bkmkend _Toc417355201}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_select_datablock (cbf_handle handle, unsigned int datablock);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_select_datablock selects data block number }{\i\fs22\cgrid0 datablock}{\fs22\cgrid0  as the current data block.
\par 
\par The first data block is number 0.
\par 
\par If the data block does not exist, the function returns CBF_NOTFOUND.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle.
\par datablock:\tab Number of the data block to select. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_count_datablocks
\par cbf_select_category
\par cbf_select_column
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 {\*\bkmkstart _Toc417355202}cbf_select_row{\*\bkmkend _Toc417355202} \page {\*\bkmkstart _Toc417355203}2.3.37  cbf_select_category{\*\bkmkend _Toc417355203}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_select_category (cbf_handle handle, unsigned int category);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_select_category selects category number }{\i\fs22\cgrid0 category}{\fs22\cgrid0  in the current data block as the current category.
\par 
\par The first category is number 0.
\par 
\par The current column and row become undefined.
\par 
\par If the category does not exist, the function returns CBF_NOTFOUND.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle.
\par category:\tab Number of the category to select. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_count_categories
\par cbf_select_datablock
\par cbf_select_column
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 {\*\bkmkstart _Toc417355204}cbf_select_row{\*\bkmkend _Toc417355204} \page {\*\bkmkstart _Toc417355205}2.3.38  cbf_select_column{\*\bkmkend _Toc417355205}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_select_column (cbf_handle handle, unsigned int column);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_select_column selects column number }{\i\fs22\cgrid0 column}{\fs22\cgrid0  in the current category as the current column.
\par 
\par The first column is number 0.
\par 
\par The current row is not affected
\par 
\par If the column does not exist, the function returns CBF_NOTFOUND.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle.
\par column:\tab Number of the column to select. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_count_columns
\par cbf_select_datablock
\par cbf_select_category
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 {\*\bkmkstart _Toc417355206}cbf_select_row{\*\bkmkend _Toc417355206} \page {\*\bkmkstart _Toc417355207}2.3.39  cbf_select_row{\*\bkmkend _Toc417355207}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_select_row (cbf_handle handle, unsigned int row);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_select_row selects row number }{\i\fs22\cgrid0 row}{\fs22\cgrid0  in the current category as the current row.
\par 
\par The first row is number 0.
\par 
\par The current column is not affected
\par 
\par If the row does not exist, the function returns CBF_NOTFOUND.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle.
\par row:\tab Number of the row to select. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_count_rows
\par cbf_select_datablock
\par cbf_select_category
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 {\*\bkmkstart _Toc417355208}cbf_select_column{\*\bkmkend _Toc417355208} \page {\*\bkmkstart _Toc417355209}2.3.40  cbf_datablock_name{\*\bkmkend _Toc417355209}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_datablock_name (cbf_handle handle, const char **datablockname);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_datablock_name sets *}{\i\fs22\cgrid0 datablockname}{\fs22\cgrid0  to point to the name of the current data block.
\par 
\par The data block name will be valid as long as the data block exists and has not been renamed.  
\par 
\par The name must not be modified by the program in any way.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle.
\par datablockname:\tab Pointer to the destination data block name pointer. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_find_datablock
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 \page {\*\bkmkstart _Toc417355210}2.3.41  cbf_category_name{\*\bkmkend _Toc417355210}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_category_name (cbf_handle handle, const char **categoryname);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_category_name sets *}{\i\fs22\cgrid0 categoryname }{\fs22\cgrid0 to point to the name of the current category of the current data block.
\par 
\par The category name will be valid as long as the category exists.  
\par 
\par The name must not be modified by the program in any way.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle.
\par categoryname:\tab Pointer to the destination category name pointer. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_find_category
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 \page {\*\bkmkstart _Toc417355211}2.3.42  cbf_column_name{\*\bkmkend _Toc417355211}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_column_name (cbf_handle handle, const char **columnname);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_column_name sets *}{\i\fs22\cgrid0 columnname }{\fs22\cgrid0 to point to the name of the current column of the current category.
\par 
\par The column name will be valid as long as the column exists.  
\par 
\par The name must not be modified by the program in any way.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle.
\par columnname:\tab Pointer to the destination column name pointer. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_find_column
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 \page {\*\bkmkstart _Toc417355212}2.3.43  cbf_row_number{\*\bkmkend _Toc417355212}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_row_number (cbf_handle handle, unsigned int *row);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_row_number sets *}{\i\fs22\cgrid0 row}{\fs22\cgrid0  to the number of the current row of the current category.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle.
\par row:\tab Pointer to the destination row number. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 {\*\bkmkstart _Toc417355213}cbf_select_row{\*\bkmkend _Toc417355213} \page {\*\bkmkstart _Toc417355214}2.3.44  cbf_get_value{\*\bkmkend _Toc417355214}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_get_value (cbf_handle handle, const char **value);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_get_value sets *}{\i\fs22\cgrid0 value}{\fs22\cgrid0  to point to the ASCII value of the item at the current column and row.
\par 
\par If the value is not ASCII, the function returns CBF_BINARY.
\par 
\par The value will be valid as long as the item exists and has not been set to a new value.  
\par 
\par The value must not be modified by the program in any way.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle.
\par value:\tab Pointer to the destination value pointer. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 {\*\bkmkstart _Toc417355215}cbf_set_value
\par cbf_get_integervalue
\par cbf_get_doublevalue
\par cbf_get_integerarrayparameters
\par cbf_get_integerarray}{{\*\bkmkend _Toc417355215}
\par }{\fs22 \page {\*\bkmkstart _Toc417355216}2.3.45  cbf_set_value{\*\bkmkend _Toc417355216}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_set_value (cbf_handle handle, const char *value);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_set_value sets the item at the current column and row to the ASCII value }{\i\fs22\cgrid0 value}{\fs22\cgrid0 .
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle.
\par value:\tab ASCII value. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 {\*\bkmkstart _Toc417355217}cbf_get_value{\*\bkmkend _Toc417355217} 
\par cbf_set_integervalue
\par cbf_set_doublevalue
\par cbf_set_integerarray \page {\*\bkmkstart _Toc417355218}2.3.46  cbf_get_integervalue{\*\bkmkend _Toc417355218}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_get_integervalue (cbf_handle handle, int *number);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_get_integervalue sets *}{\i\fs22\cgrid0 number}{\fs22\cgrid0  to the value of the ASCII item at the current column and row interpreted as a decimal integer.
\par 
\par If the value is not ASCII, the function returns CBF_BINARY.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle.
\par number:\tab pointer to the number. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_set_integervalue
\par cbf_get_value
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 cbf_get_doublevalue
\par cbf_get_integerarrayparameters
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22 cbf_get_integerarray}{\fs22\cgrid0 
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 \page {\*\bkmkstart _Toc417355219}2.3.47  cbf_set_integervalue{\*\bkmkend _Toc417355219}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_set_integervalue (cbf_handle handle, int number);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_set_integervalue sets the item at the current column and row to the integer value }{\i\fs22\cgrid0 number}{\fs22\cgrid0  written as a decimal ASCII string.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle.
\par number:\tab Integer value. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 {\*\bkmkstart _Toc417355220}cbf_get_integervalue{\*\bkmkend _Toc417355220}
\par cbf_set_value
\par cbf_set_integervalue
\par cbf_set_doublevalue
\par cbf_set_integerarray \page {\*\bkmkstart _Toc417355221}2.3.48  cbf_get_doublevalue{\*\bkmkend _Toc417355221}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_get_doublevalue (cbf_handle handle, double *number);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_get_doublevalue sets *}{\i\fs22\cgrid0 number}{\fs22\cgrid0  to the value of the ASCII item at the current column and row interpreted as a decimal floating-point number.
\par 
\par If the value is not ASCII, the function returns CBF_BINARY.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle.
\par number:\tab Pointer to the destination number. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_set_doublevalue
\par cbf_get_value
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 cbf_get_integervalue
\par cbf_get_integerarrayparameters
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22 cbf_get_integerarray}{\fs22\cgrid0  
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 \page {\*\bkmkstart _Toc417355222}2.3.49  cbf_set_doublevalue{\*\bkmkend _Toc417355222}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_set_doublevalue (cbf_handle handle, const char *format, double number);
\par }{\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_set_doublevalue sets the item at the current column and row to the floating-point value }{\i\fs22\cgrid0 number}{\fs22\cgrid0  written as an ASCII string with the format specified by }{\i\fs22\cgrid0 format}{\fs22\cgrid0 
 as appropriate for the printf function.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle.
\par format:\tab Format for the number.
\par number:\tab Floating-point value. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par {\*\bkmkstart _Toc417355223}cbf_get_doublevalue
\par cbf_set_value
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 cbf_set_integervalue
\par cbf_set_integerarray {\*\bkmkend _Toc417355223}\page {\*\bkmkstart _Toc417355224}2.3.50  cbf_get_integerarrayparameters{\*\bkmkend _Toc417355224}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_get_integerarrayparameters (cbf_handle handle,
\par }\pard \fi720\li1440\nowidctlpar\widctlpar\adjustright {\fs22 int *binary_id,
\par int *elsigned, int *elunsigned,
\par size_t *elements,
\par int *minelement, int *maxelement);
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_get_integerarrayparameters sets *}{\i\fs22\cgrid0 binary_id}{\fs22\cgrid0 , *}{\i\fs22\cgrid0 elsigned}{\fs22\cgrid0 , *}{\i\fs22\cgrid0 elunsigned}{\fs22\cgrid0 , *}{\i\fs22\cgrid0 elements}{\fs22\cgrid0 , *}{\i\fs22\cgrid0 minelement}{\fs22\cgrid0 
 and *}{\i\fs22\cgrid0 maxelement}{\fs22\cgrid0  to values read from the binary value of the item at the current column and row.
\par 
\par If the value is not binary, the function returns CBF_ASCII.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle.
\par binary_id:\tab Pointer to the destination integer binary identifier. 
\par elsigned:\tab Pointer to an integer.  Set to 1 if the elements can be read as signed integers. 
\par elunsigned:\tab Pointer to an integer.  Set to 1 if the elements can be read as unsigned integers. 
\par elements:\tab Pointer to the destination number of elements. 
\par minelement:\tab Pointer to the destination smallest element. 
\par maxelement:\tab Pointer to the destination largest element. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_set_integerarray
\par cbf_get_integerarray
\par cbf_get_value
\par cbf_get_integervalue
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 cbf_get_doublevalue
\par \page {\*\bkmkstart _Toc417355225}2.3.51  cbf_get_integerarray{\*\bkmkend _Toc417355225}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_get_integerarray (cbf_handle handle,
\par }\pard \fi720\li1440\nowidctlpar\widctlpar\adjustright {\fs22 int *binary_id,
\par void *array, size_t elsize, int elsigned,
\par size_t elements, size_t *elements_read);
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_get_integerarray reads the binary value of the item at the current column and row into an integer array.  The array consists of }{\i\fs22\cgrid0 elements}{\fs22\cgrid0  elements of }{\i\fs22\cgrid0 elsize}{\fs22\cgrid0  bytes each, starting at }{
\i\fs22\cgrid0 array}{\fs22\cgrid0 .  The elements are signed if }{\i\fs22\cgrid0 elsigned}{\fs22\cgrid0  is non-0 and unsigned otherwise.  *}{\i\fs22\cgrid0 binary_id}{\fs22\cgrid0  is set to the binary section identifier and *}{\i\fs22\cgrid0 
elements_read }{\fs22\cgrid0 to the number of elements actually read.
\par 
\par If any element in the binary data can\rquote t fit into the destination element, the destination is set the nearest possible value.
\par 
\par If the value is not binary, the function returns CBF_ASCII.
\par 
\par If the requested number of elements can\rquote t be read, the function will read as many as it can and then return CBF_ENDOFDATA.
\par 
\par Currently, the destination array must consist of chars, shorts or ints (signed or unsigned).  If }{\i\fs22\cgrid0 elsize }{\fs22\cgrid0 is not equal to sizeof (char), sizeof (short) or sizeof (int), the function returns CBF_ARGUMENT.
\par 
\par An additional restriction in the current version of CBFLIB is that values too large to fit in an int are not correctly decompressed.  As an example, if the machine with 32-bit ints is reading an array containing a value outside the range 0 .. 2}{
\fs22\super\cgrid0 32}{\fs22\cgrid0 -1 (unsigned) or -2}{\fs22\super\cgrid0 31}{\fs22\cgrid0  .. 2}{\fs22\super\cgrid0 31}{\fs22\cgrid0 -1 (signed), the array will not be correctly decompressed.  This restriction will be removed in the next release.

\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle.
\par binary_id:\tab Pointer to the destination integer binary identifier. 
\par array:\tab Pointer to the destination array.
\par elsize:\tab Size in bytes of each destination array element. 
\par elsigned:\tab Set to non-0 if the destination array elements are signed. 
\par elements:\tab The number of elements to read. 
\par elements_read:\tab Pointer to the destination number of elements actually read.
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par \page SEE ALSO 
\par 
\par cbf_set_integerarray
\par cbf_get_integerarrayparameters
\par cbf_get_value
\par cbf_get_integervalue
\par }{\fs22 cbf_get_doublevalue}{\fs22\cgrid0 
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 \page {\*\bkmkstart _Toc417355226}2.3.52  cbf_set_integerarray{\*\bkmkend _Toc417355226}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par PROTOTYPE 
\par 
\par }{\fs22 #include \ldblquote cbf.h\rdblquote  
\par 
\par int cbf_set_integerarray (cbf_handle handle,
\par \tab \tab \tab unsigned int compression,
\par \tab \tab \tab size_t repeat,
\par }\pard \fi720\li1440\nowidctlpar\widctlpar\adjustright {\fs22 int binary_id,
\par void *array, size_t elsize, int elsigned,
\par size_t elements);
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par DESCRIPTION
\par 
\par cbf_set_integerarray sets the binary value of the item at the current column and row to an integer array}{\i\fs22\cgrid0 .}{\fs22\cgrid0  The array consists of }{\i\fs22\cgrid0 elements}{\fs22\cgrid0  elements of }{\i\fs22\cgrid0 elsize}{\fs22\cgrid0 
 bytes each, starting at }{\i\fs22\cgrid0 array}{\fs22\cgrid0 .  The elements are signed if }{\i\fs22\cgrid0 elsigned}{\fs22\cgrid0  is non-0 and unsigned otherwise.  }{\i\fs22\cgrid0 binary_id}{\fs22\cgrid0  is the binary section identifier.
\par 
\par The array will be compressed using the compression scheme specifed by }{\i\fs22\cgrid0 compression}{\fs22\cgrid0 .  Currently, the available schemes are:
\par 
\par }\pard \li540\nowidctlpar\widctlpar\tx2880\adjustright {\fs22\cgrid0 CBF_CANONICAL:\tab Canonical-code compression \tab (section 3.3.1)
\par CBF_PACKED:\tab CCP4-style packing \tab \tab (section 3.3.2)
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par The values compressed are limited to 64 bits.  If any element in the array is larger than 64 bits, the value compressed is the nearest 64-bit value.
\par 
\par Currently, the source array must consist of chars, shorts or ints (signed or unsigned).  If }{\i\fs22\cgrid0 elsize }{\fs22\cgrid0 is not equal to sizeof (char), sizeof (short) or sizeof (int), the function returns CBF_ARGUMENT.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 handle:\tab CBF handle.
\par compression:\tab Compression method to use.
\par repeat:\tab Second dimension for \u8805\'3d2-dimensional arrays (currently unused)
\par binary_id:\tab Integer binary identifier. 
\par array:\tab Pointer to the source array.
\par elsize:\tab Size in bytes of each source array element. 
\par elsigned:\tab Set to non-0 if the source array elements are signed. 
\par elements:\tab The number of elements in the array. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par RETURN VALUE 
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par 
\par SEE ALSO 
\par 
\par cbf_get_integerarrayparameters
\par cbf_get_integerarray
\par cbf_set_value
\par cbf_set_integervalue
\par }{\fs22 cbf_set_doublevalue}{\fs22\cgrid0 
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 \page {\*\bkmkstart _Toc417355227}2.3.53  cbf_failnez{\*\bkmkend _Toc417355227}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par DEFINITION
\par 
\par #include \ldblquote cbf.h\rdblquote 
\par 
\par #define cbf_failnez(f) \{ int err; err = (f); if (err) return err; \}
\par 
\par 
\par DESCRIPTION
\par 
\par cbf_failnez is a macro used for error propagation throughout CBFLIB.  cbf_failnez executes the function }{\i\fs22\cgrid0 f}{\fs22\cgrid0  and saves the returned error value.  If the error value is non-0, cbf_failnez executes a return with the 
error value as argument.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 f:\tab Integer function to execute. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par 
\par SEE ALSO 
\par 
\par cbf_onfailnez
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 \page {\*\bkmkstart _Toc417355228}2.3.54  cbf_onfailnez{\*\bkmkend _Toc417355228}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22\cgrid0 
\par DEFINITION
\par 
\par #include \ldblquote cbf.h\rdblquote 
\par 
\par #define cbf_onfailnez(f,c) \{ int err; err = (f); if (err) \{\{ c; \} return err; \}\}
\par 
\par 
\par DESCRIPTION
\par 
\par cbf_onfailnez is a macro used for error propagation throughout CBFLIB.  cbf_onfailnez executes the function }{\i\fs22\cgrid0 f}{\fs22\cgrid0  and saves the returned error value.  If the error value is non-0, cbf_failnez executes first the statement }{
\i\fs22\cgrid0 c}{\fs22\cgrid0  and then a return with the error value as argument.
\par 
\par 
\par ARGUMENTS
\par 
\par }\pard \fi-1800\li1800\nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 f:\tab integer function to execute. 
\par c:\tab statement to execute on failure.
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22\cgrid0 
\par SEE ALSO 
\par 
\par cbf_failnez
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 \page {\*\bkmkstart _Toc417355229}3.  File format}{\b\i\fs22 {\*\bkmkend _Toc417355229}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22 
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 3.1 {\*\bkmkstart _Toc417355230} General description{\*\bkmkend _Toc417355230}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22 
\par With the exception of the binary sections, a CBF file is an mmCIF-format ASCII file.  This means that a CBF file with no binary sections is a CIF file and CBFLIB can also be used to access normal CIF files.
\par 
\par 
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 3.2 {\*\bkmkstart _Toc417355231} Format of the binary sections{\*\bkmkend _Toc417355231}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22 
\par Each binary section is encoded as a \lquote ;\rquote -delimited string, starting and ending with an arbitrary number of pure-ASCII characters.  CIFLIB writes \ldblquote START OF BINARY SECTION\rdblquote  at the start of a binary section and \ldblquote 
END OF BINARY SECTION\rdblquote  at the end of a binary section, but the actual ASCII text is ignored when the binary section is read.
\par 
\par As written by CIFLIB, the structure of a binary section is:
\par 
\par }\trowd \trgaph108\trleft360 \clvertalt\cltxlrtb \cellx2070\clvertalt\cltxlrtb \cellx3600\clvertalt\cltxlrtb \cellx5220\clvertalt\cltxlrtb \cellx8460\pard\plain \s2\qc\sa120\keepn\nowidctlpar\widctlpar\intbl\outlinelevel1\adjustright \cgrid {\fs22 
{\*\bkmkstart _Toc417354587}{\*\bkmkstart _Toc417355232}Byte{\*\bkmkend _Toc417354587}{\*\bkmkend _Toc417355232}\cell {\*\bkmkstart _Toc417354588}{\*\bkmkstart _Toc417355233}ASCII symbol{\*\bkmkend _Toc417354588}{\*\bkmkend _Toc417355233}\cell 
{\*\bkmkstart _Toc417354589}{\*\bkmkstart _Toc417355234}Decimal value{\*\bkmkend _Toc417354589}{\*\bkmkend _Toc417355234}\cell }\pard \s2\sa120\keepn\nowidctlpar\widctlpar\intbl\outlinelevel1\adjustright {\fs22 \tab {\*\bkmkstart _Toc417354590}
{\*\bkmkstart _Toc417355235}Description{\*\bkmkend _Toc417354590}{\*\bkmkend _Toc417355235}\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\cgrid {\fs22 \row }\trowd \trgaph108\trleft360 \clvertalt\cltxlrtb \cellx2070\clvertalt\cltxlrtb 
\cellx3600\clvertalt\cltxlrtb \cellx5220\clvertalt\cltxlrtb \cellx8460\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 1\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 ;\cell 59\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {
\fs22 Initial \lquote ;\rquote  delimiter\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 2\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 carriage-return\cell 13
\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 3\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 
line-feed\cell 10\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 The CBF new-line code is carriage-return, line-feed\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 4
\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 S\cell 83\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 
5\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 T\cell 84\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {
\fs22 6\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 A\cell 65\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright 
{\fs22 7\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 R\cell 83\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\fs22 8\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 T\cell 84\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row 
}\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 9\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22  \cell 32\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 
\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 10\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 O\cell 79\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {
\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 11\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 F\cell 70\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 12\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell 32\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell 
}\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 13\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 B\cell 66\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 
\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 14\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 I\cell 73\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {
\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 15\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 N\cell 78\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 16\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 A\cell 65\cell 
}\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 17\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 R\cell 83
\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 18\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 Y\cell 
89\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 19\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 
\cell 32\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 20\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {
\fs22 S\cell 83\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 21\cell }\pard 
\qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 E\cell 69\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 22\cell 
}\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 C\cell 67\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 23
\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 T\cell 84\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 
24\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 I\cell 73\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {
\fs22 25\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 O\cell 79\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\fs22 26\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 N\cell 78\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row 
}\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 27\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 carriage-return\cell 13\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 28\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 line-feed\cell 10\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 
\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 29\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 substitute\cell 26\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\fs22 Stop the listing of the file in MS-DOS\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 30\cell }\pard 
\qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 end-of-transmission\cell 4\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 Stop the listing of the file in unix\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\fs22 31\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell 213\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 First non-ASCII value\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 32 .. 39\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 
Binary section identifier (64-bit little-endien)\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 40 .. 47\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell \cell 
}\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 Offset from byte 48 to the first ASCII character following the binary data\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 
48 .. 55\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell \cell }\pard\plain \s1\keepn\nowidctlpar\widctlpar\intbl\outlinelevel0\adjustright {\fs22\cgrid {\*\bkmkstart _Toc417354591}{\*\bkmkstart _Toc417355236}Compression type
{\*\bkmkend _Toc417354591}{\*\bkmkend _Toc417355236}\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\cgrid {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 56 .. 56 + }{\i\fs22 n}{\fs22  - 1 \cell }\pard 
\qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 Binary data (}{\i\fs22 n}{\fs22  bytes)\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\fs22 56 + }{\i\fs22 n}{\fs22 \cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 carriage-return\cell 13\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 57 + }{\i\fs22 n}{\fs22 \cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 line-feed\cell 10\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 58 + }{\i\fs22 n}{\fs22 \cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {
\fs22 E\cell 69\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 59 + }{\i\fs22 n}{\fs22 \cell }\pard 
\qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 N\cell 78\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 60 + }{
\i\fs22 n}{\fs22 \cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 D\cell 68\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\fs22 61 + }{\i\fs22 n}{\fs22 \cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22  \cell 32\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 62 + }{\i\fs22 n}{\fs22 \cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 O\cell 79\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 63 + }{\i\fs22 n}{\fs22 \cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {
\fs22 F\cell 70\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 64 + }{\i\fs22 n}{\fs22 \cell }\pard 
\qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell 32\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 65 + }{
\i\fs22 n}{\fs22 \cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 B\cell 66\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\fs22 66 + }{\i\fs22 n}{\fs22 \cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 I\cell 73\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 67 + }{\i\fs22 n}{\fs22 \cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 N\cell 78\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 68 + }{\i\fs22 n}{\fs22 \cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {
\fs22 A\cell 65\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 69 + }{\i\fs22 n}{\fs22 \cell }\pard 
\qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 R\cell 83\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 70 + }{
\i\fs22 n}{\fs22 \cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 Y\cell 89\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\fs22 71 + }{\i\fs22 n}{\fs22 \cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell 32\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 72 + }{\i\fs22 n}{\fs22 \cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 S\cell 83\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 73 + }{\i\fs22 n}{\fs22 \cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {
\fs22 E\cell 69\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 74 + }{\i\fs22 n}{\fs22 \cell }\pard 
\qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 C\cell 67\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 75 + }{
\i\fs22 n}{\fs22 \cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 T\cell 84\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\fs22 76 + }{\i\fs22 n}{\fs22 \cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 I\cell 73\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 77 + }{\i\fs22 n}{\fs22 \cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 O\cell 79\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 78 + }{\i\fs22 n}{\fs22 \cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {
\fs22 N\cell 78\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 79 + }{\i\fs22 n}{\fs22 \cell }\pard 
\qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 carriage-return\cell 13\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {
\fs22 80 + }{\i\fs22 n}{\fs22 \cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 line-feed\cell 10\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\trowd 
\trgaph108\trleft360 \clvertalt\cltxlrtb \cellx2070\clvertalt\cltxlrtb \cellx3600\clvertalt\cltxlrtb \cellx5220\clvertalt\cltxlrtb \cellx8460\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 81 + }{\i\fs22 n}{\fs22 \cell }\pard 
\qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 ;\cell 59\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 Final \lquote ;\rquote  delimiter\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard 
\nowidctlpar\widctlpar\adjustright {\fs22 
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 \page {\*\bkmkstart _Toc417355237}3.3  Compression schemes{\*\bkmkend _Toc417355237}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22 
\par Two schemes for lossless compression of integer arrays (such as images) have been implemented in this version of CBFLIB:
\par 
\par {\pntext\pard\plain\fs22\cgrid \hich\af0\dbch\af0\loch\f0 1.\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\ls8\adjustright {\fs22 
An entropy-encoding scheme using canonical coding
\par {\pntext\pard\plain\fs22\cgrid \hich\af0\dbch\af0\loch\f0 2.\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\ls8\adjustright {\fs22 
A CCP4-style packing scheme. 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22 
\par Both encode the difference (or error) between the
 current element in the array and the prior element.  Parameters required for more sophisticated predictors have been included in the compression functions and will be used in a future version of the library.
\par 
\par 
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 {\*\bkmkstart _Toc417355238}3.3.1  Canonical-code compression{\*\bkmkend _Toc417355238}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22 
\par The canoni
cal-code compression scheme encodes errors in two ways: directly or indirectly.  Errors are coded directly using a symbol corresponding to the error value.  Errors are coded indirectly using a symbol for the number of bits in the (signed) error, followed 
by the error iteslf.  
\par 
\par At the start of the compression, CBFLIB constructs a table containing a set of symbols, one for each of the 2}{\i\fs22\super n}{\fs22  direct codes from \endash (2}{\i\fs22\super n}{\fs22\super -1}{\fs22 ) .. 2}{\i\fs22\super n}{\fs22\super \_1}{\fs22 \_
1, one for a stop code, and one for each of the }{\i\fs22 maxbits}{\fs22 -}{\i\fs22 n}{\fs22  indirect codes, where }{\i\fs22 n}{\fs22  is chosen at compress time and }{\i\fs22 maxbits}{\fs22 
 is the maximum number of bits in an error.  CBFLIB then assigns to each symbol a bit-code, using a shorter bit code for the more common symbols and a longer bit code for the less common symbols.  The bit-code lengths are ca
lculated using a Huffman-type algorithm, and the actual bit-codes are constructed using the canonical-code algorithm described by Moffat, }{\i\fs22 et al}{\fs22 . (}{\i\fs22 International Journal of High Speed Electronics and Systems}{\fs22 
, Vol 8, No 1 (1997) 179-231).
\par 
\par The structure of the compressed data is:
\par 
\par }\trowd \trgaph108\trleft360 \clvertalt\cltxlrtb \cellx3420\clvertalt\cltxlrtb \cellx8460\pard\plain \s2\qc\sa120\keepn\nowidctlpar\widctlpar\intbl\outlinelevel1\adjustright \cgrid {\fs22 {\*\bkmkstart _Toc417354592}{\*\bkmkstart _Toc417355239}Byte
{\*\bkmkend _Toc417354592}{\*\bkmkend _Toc417355239}\cell }\pard \s2\sa120\keepn\nowidctlpar\widctlpar\intbl\outlinelevel1\adjustright {\fs22 \tab {\*\bkmkstart _Toc417354593}{\*\bkmkstart _Toc417355240}Value{\*\bkmkend _Toc417354593}
{\*\bkmkend _Toc417355240}\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\cgrid {\fs22 \row }\trowd \trgaph108\trleft360 \clvertalt\cltxlrtb \cellx3420\clvertalt\cltxlrtb \cellx8460\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 
1 .. 8\cell Number of elements (64-bit little-endian number)\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 9 .. 16\cell Minimum element\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 17 .. 24\cell Maximum element\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {
\fs22 25 .. 32\cell Repeat length (currently unused)\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 33\cell Number of bits directly coded, }{\i\fs22 n}{\fs22 \cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 34\cell Maximum number of bits encoded, }{\i\fs22 maxbits}{\fs22 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\fs22 35 .. 35+2}{\i\fs22\super n}{\fs22 \_1\cell Number of bits in each direct code \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 35+2}{
\i\fs22\super n}{\fs22 \cell Number of bits in the stop code\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 35+2}{\i\fs22\super n}{\fs22 +1 .. 35+2}{\i\fs22\super n}{\fs22 +}{
\i\fs22 maxbits}{\fs22 -}{\i\fs22 n}{\fs22 \cell Number of bits in each indirect code\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\trowd \trgaph108\trleft360 \clvertalt\cltxlrtb \cellx3420\clvertalt\cltxlrtb \cellx8460\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\fs22 35+2}{\i\fs22\super n}{\fs22 +}{\i\fs22 maxbits}{\fs22 -}{\i\fs22 n}{\fs22 +1 ..\cell Coded data\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\adjustright {
\fs22  
\par 
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\fs22 \page {\*\bkmkstart _Toc417355241}3.3.2  CCP4-style compression{\*\bkmkend _Toc417355241}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22 
\par The CCP4-style compression writes the errors in blocks .  Each block begins with a 6-bit code.  The number of errors in the block is 2}{\i\fs22\super n}{\fs22 , where }{\i\fs22 n}{\fs22  is the value in bits 0\~..\~2.  Bits 3\~..\~
5 encode the number of bits in each error:
\par 
\par }\trowd \trgaph108\trleft360 \clvertalt\cltxlrtb \cellx2520\clvertalt\cltxlrtb \cellx5220\pard\plain \s2\qc\sa120\keepn\nowidctlpar\widctlpar\intbl\outlinelevel1\adjustright \cgrid {\fs22 {\*\bkmkstart _Toc417354594}{\*\bkmkstart _Toc417355242}
Value in bits 3 .. 5{\*\bkmkend _Toc417354594}{\*\bkmkend _Toc417355242}\cell {\*\bkmkstart _Toc417354595}{\*\bkmkstart _Toc417355243}Number of bits in each error{\*\bkmkend _Toc417354595}{\*\bkmkend _Toc417355243}\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20\cgrid {\fs22 \row }\trowd \trgaph108\trleft360 \clvertalt\cltxlrtb \cellx2520\clvertalt\cltxlrtb \cellx5220\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 0\cell 0\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 1\cell 4\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 2\cell 5
\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 3\cell 6\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {
\fs22 4\cell 7\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 5\cell 8\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard 
\qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 6\cell 16\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\trowd \trgaph108\trleft360 \clvertalt\cltxlrtb \cellx2520\clvertalt\cltxlrtb \cellx5220\pard 
\qc\nowidctlpar\widctlpar\intbl\adjustright {\fs22 7\cell 65\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\adjustright {\fs22 
\par The structure of the compressed data is:
\par 
\par }\trowd \trgaph108\trleft360 \clvertalt\cltxlrtb \cellx2520\clvertalt\cltxlrtb \cellx8460\pard\plain \s2\qc\sa120\keepn\nowidctlpar\widctlpar\intbl\outlinelevel1\adjustright \cgrid {\fs22 {\*\bkmkstart _Toc417354596}{\*\bkmkstart _Toc417355244}Byte
{\*\bkmkend _Toc417354596}{\*\bkmkend _Toc417355244}\cell }\pard \s2\sa120\keepn\nowidctlpar\widctlpar\intbl\outlinelevel1\adjustright {\fs22 \tab \tab {\*\bkmkstart _Toc417354597}{\*\bkmkstart _Toc417355245}Value{\*\bkmkend _Toc417354597}
{\*\bkmkend _Toc417355245}\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\cgrid {\fs22 \row }\trowd \trgaph108\trleft360 \clvertalt\cltxlrtb \cellx2520\clvertalt\cltxlrtb \cellx8460\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 
1 .. 8\cell Number of elements (64-bit little-endian number)\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 9 .. 16\cell Minumum element (currently unused)\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 17 .. 24\cell Maximum element (currently unused)\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\fs22 25 .. 32\cell Repeat length (currently unused)\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\trowd \trgaph108\trleft360 \clvertalt\cltxlrtb \cellx2520\clvertalt\cltxlrtb \cellx8460\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\fs22 33 ..\cell Coded data\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs22 \row }\pard \nowidctlpar\widctlpar\adjustright {\fs22 
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\page }{\fs22 {\*\bkmkstart _Ref417410155}4.  Source files{\*\bkmkend _Ref417410155}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22 
\par The CBFLIB source files are in the src subdirectory of the CBFLIB main directory.  The files are:
\par 
\par }\pard \li360\nowidctlpar\widctlpar\adjustright {\fs22 cbf.c\tab \tab cbf.h\tab \tab \tab CBFLIB API functions
\par cbf_alloc.c\tab \tab cbf_alloc.h\tab \tab Memory allocation functions
\par cbf_ascii.c\tab \tab cbf_ascii.h\tab \tab Function for writing ASCII values
\par cbf_binary.c\tab cbf_binary.h\tab \tab Functions for binary values
\par cbf_canonical.c\tab cbf_canonical.h\tab \tab Canonical-code compression
\par cbf_compress.c\tab cbf_compress.h\tab \tab General compression routines
\par cbf_context.c\tab cbf_context.h\tab \tab Control of temporary files
\par cbf_file.c\tab \tab cbf_file.h\tab \tab File in/out functions
\par cbf_lex.c\tab \tab cbf_lex.h\tab \tab Lexical analyser
\par cbf_packed.c\tab cbf_packed.h\tab \tab CCP4-style packing compression
\par cbf_stx.c\tab \tab cbf_stx.h\tab \tab Parser
\par cbf_tree.c\tab \tab cbf_tree.h\tab \tab CBF tree-structure functions
\par cbf_write.c\tab \tab cbf_write.h\tab \tab Functions for writing files
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22 
\par There are 2 additional files used by the example program (section 5) for reading MAR300, MAR345 or ADSC CCD images:
\par 
\par }\pard \li360\nowidctlpar\widctlpar\adjustright {\fs22 img.c\tab \tab img.h\tab \tab \tab Simple image library
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22 
\par And the example program itself:
\par 
\par }\pard \li360\nowidctlpar\widctlpar\adjustright {\fs22 makecbf.c
\par 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22 
\par }\pard\plain \s1\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright {\page }{\fs22 {\*\bkmkstart _Ref417410320}5.  Example program{\*\bkmkend _Ref417410320}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\fs22 
\par The example program makecbf.c reads an image file from a MAR300, MAR345 or ADSC CCD detector and then uses CBFLIB to convert it to CBF format.  It writes the CBF-format image to disk, reads it in again, and then compares it to the original.
\par 
\par makecbf.c is a good example of how many of the CBFLIB functions can be used.
\par 
\par To compile makecbf on an alpha workstation running Digital unix or a Silicon Graphics workstation running irix (and on most other unix platforms as well), go to the main CBFLIB directory and type:
\par 
\par }\pard \li360\nowidctlpar\widctlpar\adjustright {\fs22 cc \endash O src/*.c \endash lm \endash s \endash o makecbf
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22 
\par An example MAR345 image can be found at:
\par 
\par }\pard \li360\nowidctlpar\widctlpar\adjustright {\fs22 http://biosg1.slac.stanford.edu/biosg1-users/ellis/Public/
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22 
\par To run makecbf with the example image, type:
\par 
\par }\pard \li360\nowidctlpar\widctlpar\adjustright {\fs22 makecbf example.mar2300 test.cbf
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs22 
\par }}